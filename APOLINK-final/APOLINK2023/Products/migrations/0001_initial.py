# Generated by Django 4.1.7 on 2023-04-21 08:59

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Core', '0007_alter_firstlevelcategories_icon_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ThirdLevelCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True, verbose_name='name')),
                ('name_en', models.CharField(max_length=200, null=True, verbose_name='name')),
                ('name_el', models.CharField(max_length=200, null=True, verbose_name='name')),
                ('short_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='short name')),
                ('short_name_en', models.CharField(blank=True, max_length=40, null=True, verbose_name='short name')),
                ('short_name_el', models.CharField(blank=True, max_length=40, null=True, verbose_name='short name')),
                ('short_description', models.TextField(blank=True, null=True, verbose_name='short description')),
                ('slug', models.SlugField(allow_unicode=True, unique=True, verbose_name='slug')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='Core/Static/Photos/ThirdLevelCategories', verbose_name='icon')),
                ('parent_cat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Core.secondlevelcategories', verbose_name='parent category')),
            ],
            options={
                'verbose_name': 'Third Level Category',
                'verbose_name_plural': 'Third Level Categories',
            },
        ),
        migrations.CreateModel(
            name='ProductsDisplayed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_registered', models.DateField(default=django.utils.timezone.now, verbose_name='date registered')),
                ('date_updated', models.DateField(auto_now=True, verbose_name='date updated')),
                ('manufactured_date', models.DateField(null=True, verbose_name='manufactured date')),
                ('product_name', models.CharField(max_length=200, verbose_name='product name')),
                ('product_name_en', models.CharField(max_length=200, null=True, verbose_name='product name')),
                ('product_name_el', models.CharField(max_length=200, null=True, verbose_name='product name')),
                ('product_short_description', models.TextField(blank=True, null=True, verbose_name='product short description')),
                ('product_short_description_en', models.TextField(blank=True, null=True, verbose_name='product short description')),
                ('product_short_description_el', models.TextField(blank=True, null=True, verbose_name='product short description')),
                ('manufacturer', models.CharField(blank=True, max_length=200, null=True, verbose_name='manufactured')),
                ('manufacturer_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='manufactured')),
                ('manufacturer_el', models.CharField(blank=True, max_length=200, null=True, verbose_name='manufactured')),
                ('for_sell_rent', models.CharField(blank=True, choices=[('Selling or Renting', 'For Selling or Renting'), ('Selling', 'For Selling'), ('Renting', 'For Renting')], max_length=40, null=True, verbose_name='For sell, rent or both')),
                ('model', models.CharField(blank=True, max_length=200, null=True, verbose_name='model')),
                ('model_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='model')),
                ('model_el', models.CharField(blank=True, max_length=200, null=True, verbose_name='model')),
                ('product_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Products.thirdlevelcategories', verbose_name='product category')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Product Displayed',
                'verbose_name_plural': 'Products Displayed',
            },
        ),
        migrations.CreateModel(
            name='ProductPhotos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='upload/', verbose_name='photo')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Products.productsdisplayed', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Product Photo',
                'verbose_name_plural': 'Product Photos',
            },
        ),
        migrations.CreateModel(
            name='PalletizerSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('layer', 'Layer'), ('gantry', 'Gantry'), ('robotic', 'Robotic'), ('other', 'Other')], max_length=25, null=True, verbose_name='Palletizer Type')),
                ('type_en', models.CharField(blank=True, choices=[('layer', 'Layer'), ('gantry', 'Gantry'), ('robotic', 'Robotic'), ('other', 'Other')], max_length=25, null=True, verbose_name='Palletizer Type')),
                ('type_el', models.CharField(blank=True, choices=[('layer', 'Layer'), ('gantry', 'Gantry'), ('robotic', 'Robotic'), ('other', 'Other')], max_length=25, null=True, verbose_name='Palletizer Type')),
                ('throughput', models.FloatField(verbose_name='Throughput (pieces/min)')),
                ('application', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('application_en', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('application_el', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Products.productsdisplayed', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Palletizer spec',
                'verbose_name_plural': 'Palletizer specs',
            },
        ),
        migrations.CreateModel(
            name='DispersersSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('batch', 'Batch'), ('continuous', 'Continuous')], max_length=25, null=True, verbose_name='Batch/Continuous')),
                ('type_en', models.CharField(blank=True, choices=[('batch', 'Batch'), ('continuous', 'Continuous')], max_length=25, null=True, verbose_name='Batch/Continuous')),
                ('type_el', models.CharField(blank=True, choices=[('batch', 'Batch'), ('continuous', 'Continuous')], max_length=25, null=True, verbose_name='Batch/Continuous')),
                ('power', models.FloatField(verbose_name='Motor Power in kW')),
                ('application', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('application_en', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('application_el', models.CharField(blank=True, max_length=80, null=True, verbose_name='Application')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Products.productsdisplayed', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Dispersers spec',
                'verbose_name_plural': 'Dispersers specs',
            },
        ),
        migrations.CreateModel(
            name='CaseSealerSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('BtmDr', 'Bottom Driven'), ('SdDr', 'Side Driven'), ('T&BtmDr', 'Top & Bottom Driven')], max_length=25, null=True, verbose_name='Case Sealer Type')),
                ('type_en', models.CharField(blank=True, choices=[('BtmDr', 'Bottom Driven'), ('SdDr', 'Side Driven'), ('T&BtmDr', 'Top & Bottom Driven')], max_length=25, null=True, verbose_name='Case Sealer Type')),
                ('type_el', models.CharField(blank=True, choices=[('BtmDr', 'Bottom Driven'), ('SdDr', 'Side Driven'), ('T&BtmDr', 'Top & Bottom Driven')], max_length=25, null=True, verbose_name='Case Sealer Type')),
                ('min_box_size_cm', models.PositiveIntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)], verbose_name='Minimum Box Size (cm)')),
                ('max_box_size_cm', models.PositiveIntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Maximum Box Size (cm)')),
                ('boxes_per_min', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Maximum boxes per min')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Products.productsdisplayed', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Case Sealers Spec',
                'verbose_name_plural': 'Case Sealers Specs',
            },
        ),
        migrations.CreateModel(
            name='CasePackerSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('top', 'Top Loader'), ('side', 'Side Loader'), ('P&PL', 'Pick and Place')], max_length=25, null=True, verbose_name='Case Packer Type')),
                ('type_en', models.CharField(blank=True, choices=[('top', 'Top Loader'), ('side', 'Side Loader'), ('P&PL', 'Pick and Place')], max_length=25, null=True, verbose_name='Case Packer Type')),
                ('type_el', models.CharField(blank=True, choices=[('top', 'Top Loader'), ('side', 'Side Loader'), ('P&PL', 'Pick and Place')], max_length=25, null=True, verbose_name='Case Packer Type')),
                ('boxes_per_min', models.PositiveIntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Maximum boxes per min')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Products.productsdisplayed', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Case Packer spec',
                'verbose_name_plural': 'Case Packer specs',
            },
        ),
    ]
